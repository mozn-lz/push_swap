Run the following command "$>./push_swap 0 1 2 3". The program should display nothing (0 instruction).
Run the following command "$>./push_swap 0 1 2 3 4 5 6 7 8 9". The program should display nothing (0 instruction).

- Run "$>ARG="2 1 0"; ./push_swap $ARG | ./checker $ARG". 
Check that the checker program displays "OK" and 
that the size of the list of instructions from push_swap is 2 OR 3. Otherwise the test fails.


- Run "$>ARG="1 5 2 4 3"; ./push_swap $ARG | ./checker $ARG". 
Check that the checker program displays "OK"
and that the size of the list of instructions from
push_swap isn't more than 12. Kudos if the size of
the list of instructions is 8.

- Run "$>ARG="<5 random values>"; ./push_swap $ARG | ./checker $ARG" 
and replace the placeholder by 5 random valid values. 
Check that the checker program displays "OK" and that the size of the list of instructions
from push_swap isn't more than 12. Otherwise this test fails. You'll have to specifically check that the program wasn't developed to only answer correctly on the test included in this scale. You should repeat this test couple of times with several permutations before you validate it.

- Run "$>ARG="<100 random values>"; ./push_swap $ARG | ./checker $ARG" and replace the placeholder by 100 random valid values. Check that the checker program displays
"OK" and then give a grade based on the size of the list
of instructions:
- Less than 700: 5 
- Less than 900: 4 
- Less than 1100: 3
- Less than 1300: 2 
- Less than 1500: 1
80 65 27 45 10 25 40 75 41 47 14 8 96 34 11 36 31 64 22 61 99 20 77 88 37 92 15 46 32 72 52 76 95 94 1 5 100 98 33 70 28 17 49 89 3 69 60 44 55 82 66 57 74 54 21 13 68 85 30 6 81 4 91 67 62 39 38 50 23 58 79 42 26 73 16 7 29 97 24 87 84 2 18 93 83 35 19 63 48 78 12 71 53 90 59 9 86 51 43 56
2 88 83 84 89 96 46 52 10 97 7 80 23 69 28 30 17 63 78 82 95 53 15 51 25 1 58 100 72 38 4 76 93 16 43 79 61 11 86 62 39 31 26 8 29 37 74 68 48 5 98 42 9 36 35 60 73 91 22 57 77 49 14 94 3 67 50 81 34 27 64 32 90 47 65 71 33 40 59 75 45 66 12 85 87 56 92 20 44 24 55 19 6 41 99 13 54 70 21 18
43 100 21 61 87 91 25 92 56 66 85 54 65 26 79 9 45 39 76 52 37 38 29 74 96 1 90 99 12 4 7 15 49 82 75 97 58 77 57 31 32 88 24 98 67 28 33 62 50 81 20 84 16 78 70 30 46 3 80 68 34 83 55 64 18 13 5 73 69 60 47 11 6 41 23 59 2 22 36 94 27 40 44 86 93 35 17 72 48 14 42 53 95 51 8 10 63 19 89 71


- Run "$>ARG="<500 random values>"; ./push_swap $ARG | ./checker $ARG" and replace the placeholder by 500 random valid values (One is not called John/Jane Script
for nothing) Check that the checker program displays "OK" and then give a grade based on the size of the list
of instructions:
    - Less than  5, 500: 5 
    - Less than  7, 000: 4 
    - Less than  8, 500: 3 
    - Less than 10, 000: 2 
    - Less than 11, 500: 1
Otherwise this test fails.
You'll have to specifically check that the program wasn't developed to only answer correctly on the test included in this scale. You should repeat this test couple of times with several permutations before you validate it.



